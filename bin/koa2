#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

// CLI

before(program, 'outputHelp', function () {
  this.allowUnknownOption();
});

program
  .version(version)
  .usage('[options] [dir]')
  .option('    --pixi', 'scaffold pixi')
  .option('    --phaser', 'scaffold phaser')
  .option('    --ecs', 'scaffold phaser with ECS')
  .parse(process.argv);
  
program.css = 'less';
program.git = true;

if (!exit.exited) {
  main();
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(app_name, path) {
  var wait = 5;

  console.log();
  function complete() {
    if (--wait) return;
    var prompt = launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   run the app:');

    if (launchedFromCmd()) {
      console.log('     %s SET DEBUG=koa* & npm start', prompt, app_name);
    } else {
      console.log('     %s DEBUG=%s:* npm start', prompt, app_name);
    }

    console.log();
  }

  // JavaScript
  var app = loadTemplate('js/app.js');
  var www = loadTemplate('js/www');
  var index = loadTemplate('js/routes/index.js');

  // CSS
  var css = loadTemplate('css/style.css');
  var less = loadTemplate('css/style.less');
  var stylus = loadTemplate('css/style.styl');
  var compass = loadTemplate('css/style.scss');
  var sass = loadTemplate('css/style.sass');

  mkdir(path, function(){
    mkdir(path + '/public');
    mkdir(path + '/client');
    write(path + '/client/main.js', `
window._ = require('lodash');
var IO = require('socket.io-client');
var io = new IO();
io.on('connect', function() {
    console.log('wtf')
});
io.on('disconnect', function() {
    setTimeout(function() {
        window.location.reload(true);

    }, 1500);
});`);
    mkdir(path + '/server');
    mkdir(path + '/public/js');
    mkdir(path + '/public/img');
    mkdir(path + '/public/css', function(){
      switch (program.css) {
        case 'less':
          write(path + '/public/css/style.less', less);
          break;
        case 'stylus':
          write(path + '/public/css/style.styl', stylus);
          break;
        case 'compass':
          write(path + '/public/css/style.scss', compass);
          break;
        case 'sass':
          write(path + '/public/css/style.sass', sass);
          break;
        default:
          write(path + '/public/css/style.css', css);
      }
      complete();
    });

    mkdir(path + '/routes', function(){
      write(path + '/routes/index.js', index);
      complete();
    });

    mkdir(path + '/views', function(){
      switch (program.template) {
        case 'ejs':
          copy_template('ejs/index.ejs', path + '/views/index.ejs');
          copy_template('ejs/error.ejs', path + '/views/error.ejs');
          break;
        case 'nunjucks':
          copy_template('nunjucks/index.nunjucks', path + '/views/index.nunjucks');
          copy_template('nunjucks/layout.nunjucks', path + '/views/layout.nunjucks');
          copy_template('nunjucks/error.nunjucks', path + '/views/error.nunjucks');
          break;
        case 'jade':
        case 'pug':
          copy_template('jade/index.pug', path + '/views/index.pug');
          copy_template('jade/layout.pug', path + '/views/layout.pug');
          copy_template('jade/error.pug', path + '/views/error.pug');
          break;
        case 'hjs':
          copy_template('hogan/index.hjs', path + '/views/index.hjs');
          copy_template('hogan/error.hjs', path + '/views/error.hjs');
          break;
        case 'hbs':
          copy_template('hbs/index.hbs', path + '/views/index.hbs');
          copy_template('hbs/layout.hbs', path + '/views/layout.hbs');
          copy_template('hbs/error.hbs', path + '/views/error.hbs');
          break;
      }
      complete();
    });

    // CSS Engine support
    switch (program.css) {
      case 'less':
        app = app.replace('{css}', eol + 'app.use(require(\'less-middleware\')(path.join(__dirname, \'public\')));');
        break;
      case 'stylus':
        app = app.replace('{css}', eol + 'app.use(require(\'stylus\').middleware(path.join(__dirname, \'public\')));');
        break;
      case 'compass':
        app = app.replace('{css}', eol + 'app.use(require(\'node-compass\')({mode: \'expanded\'}));');
        break;
      case 'sass':
        app = app.replace('{css}', eol + 'app.use(require(\'node-sass-middleware\')({\n  src: path.join(__dirname, \'public\'),\n  dest: path.join(__dirname, \'public\'),\n  indentedSyntax: true,\n  sourceMap: true\n}));');
        break;
      default:
        app = app.replace('{css}', '');
    }

    // package.json
    var pkg = {
        name: app_name
      , version: '0.1.0'
      , private: true
      , "scripts": {
        "dev": "concurrently --kill-others \"npm run watch\" \"nodemon --harmony ./bin/www\"",
        "watch": "watchify client/main.js -o public/js/main.js -v",
        "build": "browserify client/main.js -o public/js/main.js",
        //"watchmore": "watchify client/vm.js -o public/js/vm.js",
        "start": "node ./bin/www"
      }
      , "dependencies": {
        "debug": "^2.6.3",
        "koa": "^2.2.0",
        "koa-bodyparser": "^3.2.0",
        "koa-convert": "^1.2.0",
        "koa-json": "^2.0.2",
        "koa-less2x": "^2.0.1",
        "koa-logger": "^2.0.1",
        "koa-onerror": "^1.2.1",
        "koa-router": "^7.1.1",
        "koa-static": "^3.0.0",
        "koa-views": "^5.2.1",
        "concurrently": "^3.5.0",
        "eventemitter3": "^2.0.3",
        "knockout": "^3.4.2",
        "lodash": "^4.17.4",
        "phaser-ce": "^2.9.2",
        "pixi.js": "^4.5.6",
        "shortid": "^2.2.8",
        "socket.io": "^2.0.4"
      }
      , "devDependencies": {
        "nodemon": "^1.8.1"
      }
    }

    // Template support
    switch (program.template) {
      case 'jade':
      case 'pug':
        pkg.dependencies['pug'] = '^2.0.0-rc.1';
        break;
      case 'ejs':
        pkg.dependencies['ejs'] = '~2.3.3';
        break;
      case 'nunjucks':
        pkg.dependencies['nunjucks'] = '~3.0.0 ';
        break;
      case 'hjs':
        pkg.dependencies['hjs'] = '~0.0.6';
        break;
      case 'hbs':
        pkg.dependencies['handlebars'] = '~4.0.5';
        app = app.replace('\'{views}\'', '\'{views}\',\n  map: { hbs: \'handlebars\' }');
        break;
      default:
    }

    app = app.replace('{views}', program.template);

    // CSS Engine support
    switch (program.css) {
      case 'less':
        pkg.dependencies['less-middleware'] = '1.0.x';
        break;
      case 'compass':
        pkg.dependencies['node-compass'] = '0.2.3';
        break;
      case 'stylus':
        pkg.dependencies['stylus'] = '0.42.3';
        break;
      case 'sass':
        pkg.dependencies['node-sass-middleware'] = '0.8.0';
        break;
      default:
    }

    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies);

    // write files
    write(path + '/package.json', JSON.stringify(pkg, null, 2));
    write(path + '/app.js', app);
    mkdir(path + '/bin', function(){
      www = www.replace('{name}', app_name);
      write(path + '/bin/www', www, 0755);

      complete();
    });

    if (program.git) {
      write(path + '/.gitignore', fs.readFileSync(__dirname + '/../templates2/js/gitignore', 'utf-8'));
    }
    if(program.pixi){
      appendFile(path + '/client/main.js',`
window.PIXI = require('pixi.js');
var app = new PIXI.Application({
  backgroundColor: 0xffffff,
  antialias: true
});
document.getElementById('container').appendChild(app.view);
var g = new PIXI.Graphics();
g.lineWidth = 1;
g.lineColor = 0x521312;
g.drawCircle(0, 0, 40);
g.moveTo(0, 0);
g.lineTo(40, 0);

var spr = new PIXI.Sprite(g.generateCanvasTexture());
spr.x = 100;
spr.y = 100;
spr.anchor.x = .5;
spr.anchor.y = .5;
app.stage.addChild(spr);
app.ticker.add(function() {
  spr.rotation += 0.01;
});
      `);
    }
    if(program.phaser){
      
    }
    if(program.ecs){
      
    }
    complete();
    console.log('auto running npm i');
    const { exec } = require('child_process');
    exec('npm i', (error, stdout, stderr) => {
      if (error) {
        console.error(`exec error: ${error}`);
        return;
      }
      console.log(`stdout: ${stdout}`);
      console.log(`stderr: ${stderr}`);
      console.log(`################## DONE #################`);
    });

  });
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates2', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
  return process.platform === 'win32'
    && process.env._ === undefined;
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates2', name), 'utf-8');
}

/**
 * Main program.
 */

function main() {
  // Path
  var destinationPath = program.args.shift() || '.';

  // App name
  var appName = path.basename(path.resolve(destinationPath));

  // Template engine
  program.template = 'pug';
  if (program.ejs) program.template = 'ejs';
  if (program.jade) program.template = 'pug';
  if (program.hogan) program.template = 'hjs';
  if (program.hbs) program.template = 'hbs';
  if (program.nunjucks) program.template = 'nunjucks';

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          console.error('aborting');
          exit(1);
        }
      });
    }
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

function appendFile(path, str) {
  fs.appendFileSync(path, str);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}
